// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/gchat/v1/gchat.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GchatClient is the client API for Gchat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GchatClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatReply, error)
	RemoveChat(ctx context.Context, in *RemoveChatRequest, opts ...grpc.CallOption) (*RemoveChatReply, error)
	JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatReply, error)
	LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatReply, error)
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error)
	ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, opts ...grpc.CallOption) (*ReceiveMsgReply, error)
}

type gchatClient struct {
	cc grpc.ClientConnInterface
}

func NewGchatClient(cc grpc.ClientConnInterface) GchatClient {
	return &gchatClient{cc}
}

func (c *gchatClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...grpc.CallOption) (*CreateChatReply, error) {
	out := new(CreateChatReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/CreateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) RemoveChat(ctx context.Context, in *RemoveChatRequest, opts ...grpc.CallOption) (*RemoveChatReply, error) {
	out := new(RemoveChatReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/RemoveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...grpc.CallOption) (*JoinChatReply, error) {
	out := new(JoinChatReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/JoinChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...grpc.CallOption) (*LeaveChatReply, error) {
	out := new(LeaveChatReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/LeaveChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error) {
	out := new(SendMsgReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gchatClient) ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, opts ...grpc.CallOption) (*ReceiveMsgReply, error) {
	out := new(ReceiveMsgReply)
	err := c.cc.Invoke(ctx, "/gchat.api.gchat.v1.Gchat/ReceiveMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GchatServer is the server API for Gchat service.
// All implementations must embed UnimplementedGchatServer
// for forward compatibility
type GchatServer interface {
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatReply, error)
	RemoveChat(context.Context, *RemoveChatRequest) (*RemoveChatReply, error)
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatReply, error)
	LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatReply, error)
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error)
	ReceiveMsg(context.Context, *ReceiveMsgRequest) (*ReceiveMsgReply, error)
	mustEmbedUnimplementedGchatServer()
}

// UnimplementedGchatServer must be embedded to have forward compatible implementations.
type UnimplementedGchatServer struct {
}

func (UnimplementedGchatServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGchatServer) CreateChat(context.Context, *CreateChatRequest) (*CreateChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChat not implemented")
}
func (UnimplementedGchatServer) RemoveChat(context.Context, *RemoveChatRequest) (*RemoveChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChat not implemented")
}
func (UnimplementedGchatServer) JoinChat(context.Context, *JoinChatRequest) (*JoinChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedGchatServer) LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveChat not implemented")
}
func (UnimplementedGchatServer) SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedGchatServer) ReceiveMsg(context.Context, *ReceiveMsgRequest) (*ReceiveMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMsg not implemented")
}
func (UnimplementedGchatServer) mustEmbedUnimplementedGchatServer() {}

// UnsafeGchatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GchatServer will
// result in compilation errors.
type UnsafeGchatServer interface {
	mustEmbedUnimplementedGchatServer()
}

func RegisterGchatServer(s grpc.ServiceRegistrar, srv GchatServer) {
	s.RegisterService(&Gchat_ServiceDesc, srv)
}

func _Gchat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_CreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).CreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/CreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).CreateChat(ctx, req.(*CreateChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_RemoveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).RemoveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/RemoveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).RemoveChat(ctx, req.(*RemoveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_JoinChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).JoinChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/JoinChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).JoinChat(ctx, req.(*JoinChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_LeaveChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).LeaveChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/LeaveChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).LeaveChat(ctx, req.(*LeaveChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).SendMsg(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gchat_ReceiveMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GchatServer).ReceiveMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gchat.api.gchat.v1.Gchat/ReceiveMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GchatServer).ReceiveMsg(ctx, req.(*ReceiveMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gchat_ServiceDesc is the grpc.ServiceDesc for Gchat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gchat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gchat.api.gchat.v1.Gchat",
	HandlerType: (*GchatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Gchat_Login_Handler,
		},
		{
			MethodName: "CreateChat",
			Handler:    _Gchat_CreateChat_Handler,
		},
		{
			MethodName: "RemoveChat",
			Handler:    _Gchat_RemoveChat_Handler,
		},
		{
			MethodName: "JoinChat",
			Handler:    _Gchat_JoinChat_Handler,
		},
		{
			MethodName: "LeaveChat",
			Handler:    _Gchat_LeaveChat_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Gchat_SendMsg_Handler,
		},
		{
			MethodName: "ReceiveMsg",
			Handler:    _Gchat_ReceiveMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gchat/v1/gchat.proto",
}
