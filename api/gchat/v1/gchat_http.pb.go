// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.3.1

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGchatCreateChat = "/gchat.api.gchat.v1.Gchat/CreateChat"
const OperationGchatJoinChat = "/gchat.api.gchat.v1.Gchat/JoinChat"
const OperationGchatLeaveChat = "/gchat.api.gchat.v1.Gchat/LeaveChat"
const OperationGchatLogin = "/gchat.api.gchat.v1.Gchat/Login"
const OperationGchatReceiveMsg = "/gchat.api.gchat.v1.Gchat/ReceiveMsg"
const OperationGchatRemoveChat = "/gchat.api.gchat.v1.Gchat/RemoveChat"
const OperationGchatSendMsg = "/gchat.api.gchat.v1.Gchat/SendMsg"

type GchatHTTPServer interface {
	CreateChat(context.Context, *CreateChatRequest) (*CreateChatReply, error)
	JoinChat(context.Context, *JoinChatRequest) (*JoinChatReply, error)
	LeaveChat(context.Context, *LeaveChatRequest) (*LeaveChatReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	ReceiveMsg(context.Context, *ReceiveMsgRequest) (*ReceiveMsgReply, error)
	RemoveChat(context.Context, *RemoveChatRequest) (*RemoveChatReply, error)
	SendMsg(context.Context, *SendMsgRequest) (*SendMsgReply, error)
}

func RegisterGchatHTTPServer(s *http.Server, srv GchatHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/login", _Gchat_Login0_HTTP_Handler(srv))
	r.POST("/v1/chat/create", _Gchat_CreateChat0_HTTP_Handler(srv))
	r.POST("/v1/chat/remove", _Gchat_RemoveChat0_HTTP_Handler(srv))
	r.POST("/v1/chat/join", _Gchat_JoinChat0_HTTP_Handler(srv))
	r.POST("/v1/chat/leave", _Gchat_LeaveChat0_HTTP_Handler(srv))
	r.POST("/v1/message/send", _Gchat_SendMsg0_HTTP_Handler(srv))
	r.POST("/v1/message/receive", _Gchat_ReceiveMsg0_HTTP_Handler(srv))
}

func _Gchat_Login0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_CreateChat0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatCreateChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateChat(ctx, req.(*CreateChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateChatReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_RemoveChat0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatRemoveChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveChat(ctx, req.(*RemoveChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveChatReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_JoinChat0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JoinChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatJoinChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JoinChat(ctx, req.(*JoinChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JoinChatReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_LeaveChat0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LeaveChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatLeaveChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LeaveChat(ctx, req.(*LeaveChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LeaveChatReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_SendMsg0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMsgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatSendMsg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMsg(ctx, req.(*SendMsgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMsgReply)
		return ctx.Result(200, reply)
	}
}

func _Gchat_ReceiveMsg0_HTTP_Handler(srv GchatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReceiveMsgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGchatReceiveMsg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReceiveMsg(ctx, req.(*ReceiveMsgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReceiveMsgReply)
		return ctx.Result(200, reply)
	}
}

type GchatHTTPClient interface {
	CreateChat(ctx context.Context, req *CreateChatRequest, opts ...http.CallOption) (rsp *CreateChatReply, err error)
	JoinChat(ctx context.Context, req *JoinChatRequest, opts ...http.CallOption) (rsp *JoinChatReply, err error)
	LeaveChat(ctx context.Context, req *LeaveChatRequest, opts ...http.CallOption) (rsp *LeaveChatReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	ReceiveMsg(ctx context.Context, req *ReceiveMsgRequest, opts ...http.CallOption) (rsp *ReceiveMsgReply, err error)
	RemoveChat(ctx context.Context, req *RemoveChatRequest, opts ...http.CallOption) (rsp *RemoveChatReply, err error)
	SendMsg(ctx context.Context, req *SendMsgRequest, opts ...http.CallOption) (rsp *SendMsgReply, err error)
}

type GchatHTTPClientImpl struct {
	cc *http.Client
}

func NewGchatHTTPClient(client *http.Client) GchatHTTPClient {
	return &GchatHTTPClientImpl{client}
}

func (c *GchatHTTPClientImpl) CreateChat(ctx context.Context, in *CreateChatRequest, opts ...http.CallOption) (*CreateChatReply, error) {
	var out CreateChatReply
	pattern := "/v1/chat/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatCreateChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) JoinChat(ctx context.Context, in *JoinChatRequest, opts ...http.CallOption) (*JoinChatReply, error) {
	var out JoinChatReply
	pattern := "/v1/chat/join"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatJoinChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) LeaveChat(ctx context.Context, in *LeaveChatRequest, opts ...http.CallOption) (*LeaveChatReply, error) {
	var out LeaveChatReply
	pattern := "/v1/chat/leave"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatLeaveChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) ReceiveMsg(ctx context.Context, in *ReceiveMsgRequest, opts ...http.CallOption) (*ReceiveMsgReply, error) {
	var out ReceiveMsgReply
	pattern := "/v1/message/receive"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatReceiveMsg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) RemoveChat(ctx context.Context, in *RemoveChatRequest, opts ...http.CallOption) (*RemoveChatReply, error) {
	var out RemoveChatReply
	pattern := "/v1/chat/remove"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatRemoveChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GchatHTTPClientImpl) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...http.CallOption) (*SendMsgReply, error) {
	var out SendMsgReply
	pattern := "/v1/message/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGchatSendMsg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
